(function(){const a='xtal-state';if(customElements.get(a))return;const b='make',c='rewrite';class d extends HTMLElement{static get properties(){return[b,c,'history']}get make(){return this._make}set make(a){null===a?this.removeAttribute(b):this.setAttribute(b,'')}get rewrite(){return this._rewrite}set rewrite(a){a?this.setAttribute(c,''):this.removeAttribute(c)}get history(){return this._history}set history(a){this._history=a,this.onInputPropsChange()}onInputPropsChange(){if(!this._make&&!this._rewrite)return;if(!this.history)return;let a;switch(typeof this.history){case'object':a=window.history.state?Object.assign({},window.history.state):{},Object.assign(a,this.history);break;case'string':case'number':a=this.history;}this.make?window.history.pushState(a,''):this.rewrite&&window.history.replaceState(a,'')}static get observedAttributes(){const a=d.properties;return[a[0],a[1]]}attributeChangedCallback(a,d,e){a===b?this._make=null!==e:a===c?this._rewrite=null!==e:void 0;this.onInputPropsChange()}_upgradeProperty(a){if(this.hasOwnProperty(a)){let b=this[a];delete this[a],this[a]=b}}connectedCallback(){d.properties.forEach((a)=>this._upgradeProperty(a))}}customElements.define(a,d)})();