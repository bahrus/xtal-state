(function(){function define(custEl){let tagName=custEl.is;if(customElements.get(tagName)){console.warn("Already registered "+tagName);return}customElements.define(tagName,custEl)}const debounce=(fn,time)=>{let timeout;return function(){clearTimeout(timeout);timeout=setTimeout(()=>fn.apply(this,arguments),time)}},disabled="disabled";function XtallatX(superClass){return class extends superClass{constructor(){super(...arguments);this._evCount={}}static get observedAttributes(){return[disabled]}get disabled(){return this._disabled}set disabled(val){this.attr(disabled,val,"")}attr(name,val,trueVal){const v=val?"set":"remove";this[v+"Attribute"](name,trueVal||val)}to$(n){const mod=n%2;return(n-mod)/2+"-"+mod}incAttr(name){const ec=this._evCount;if(name in ec){ec[name]++}else{ec[name]=0}this.attr("data-"+name,this.to$(ec[name]))}attributeChangedCallback(name,oldVal,newVal){switch(name){case disabled:this._disabled=null!==newVal;break;}}de(name,detail,asIs){const eventName=name+(asIs?"":"-changed"),newEvent=new CustomEvent(eventName,{detail:detail,bubbles:!0,composed:!1});this.dispatchEvent(newEvent);this.incAttr(eventName);return newEvent}_upgradeProperties(props){props.forEach(prop=>{if(this.hasOwnProperty(prop)){let value=this[prop];delete this[prop];this[prop]=value}})}}}function WithPath(superClass){return class extends superClass{get withPath(){return this._withPath}set withPath(val){this.setAttribute("with-path",val)}wrap(obj){if(this._withPath){let mergedObj={};const retObj=mergedObj,splitPath=this._withPath.split("."),lenMinus1=splitPath.length-1;splitPath.forEach((pathToken,idx)=>{if(idx===lenMinus1){mergedObj[pathToken]=obj}else{mergedObj=mergedObj[pathToken]={}}});return retObj}else{return obj}}}}const level="level";class XtalStateBase extends XtallatX(HTMLElement){constructor(){super(...arguments);this._level="global"}get level(){return this._level}set level(val){this.attr(level,val)}static get observedAttributes(){return super.observedAttributes.concat([level])}get window(){return this._window}attributeChangedCallback(name,oldVal,newVal){super.attributeChangedCallback(name,oldVal,newVal);switch(name){case level:this._level=newVal;break;}this.onPropsChange()}connectedCallback(){this.style.display="none";this._upgradeProperties(["disabled",level]);this._conn=!0;this.onPropsChange()}getWinObj(par){let ifr=par.querySelector("iframe[xtal-state]");if(null===ifr){ifr=document.createElement("iframe");ifr.setAttribute("xtal-state","");this._notReady=!0;ifr.addEventListener("load",()=>{this._notReady=!1;ifr.setAttribute("loaded","")});ifr.src="blank.html";ifr.style.display="none";par.appendChild(ifr)}else{if(!ifr.hasAttribute("loaded")){this._notReady=!0;ifr.addEventListener("load",()=>{this._notReady=!1})}}return ifr.contentWindow}getMchPar(){let test=this.parentElement;while(test){if(test.matches(this.level))return test;test=test.parentElement}}onPropsChange(){if(!this._conn||this._disabled)return!0;if(!this._window){switch(this._level){case"global":this._window=self;break;case"local":this._window=this.getWinObj(this.parentElement);break;case"shadow":this._window=this.getWinObj(getHost(this));break;default:this._window=this.getWinObj(this.getMchPar());}}if(this._notReady)return!0}}const make="make",rewrite="rewrite",title="title",url="url";class XtalStateCommit extends WithPath(XtalStateBase){constructor(){super(...arguments);this._title=""}static get is(){return"xtal-state-commit"}get make(){return this._make}set make(newVal){if(null!==newVal){this.setAttribute(make,"")}else{this.removeAttribute(make)}}get rewrite(){return this._rewrite}set rewrite(newVal){if(newVal){this.setAttribute(rewrite,"")}else{this.removeAttribute(rewrite)}}get history(){return this._window.history.state}set history(newVal){this._history=newVal;this.onPropsChange()}get title(){return this._title}set title(val){this.setAttribute(title,val)}get url(){return this._url}set url(val){this.setAttribute(url,val)}static get observedAttributes(){return super.observedAttributes.concat([make,rewrite,title,url,"with-path"])}attributeChangedCallback(name,oldValue,newValue){switch(name){case rewrite:case make:this["_"+name]=null!==newValue;break;case url:case title:this["_"+name]=newValue;break;case"with-path":this._withPath=newValue;break;}super.attributeChangedCallback(name,oldValue,newValue)}connectedCallback(){this._upgradeProperties(XtalStateCommit.observedAttributes.concat(["history"]));this._debouncer=debounce(()=>{this.updateHistory()},50);super.connectedCallback()}onPropsChange(){if(super.onPropsChange()){if(this._notReady){setTimeout(()=>{this.onPropsChange()},50);return}return!0}if(!this._make&&!this._rewrite)return!0;this._debouncer()}mergedHistory(){return this.wrap(this._history)}updateHistory(){const hist=this.mergedHistory();if(null===hist||hist===void 0)return;if(this.make&&!this.url)return;const method=this.make?"push":"replace";let url=this._url?this._url:this._window.location;this._window.history[method+"State"](hist,this._title,url);this.de("history",{value:hist})}}define(XtalStateCommit);class XtalStateUpdate extends XtalStateCommit{static get is(){return"xtal-state-update"}mergeDeep(target,source){if("object"!==typeof target)return;if("object"!==typeof source)return;for(const key in source){const sourceVal=source[key],targetVal=target[key];if(!sourceVal)continue;if(!targetVal){target[key]=sourceVal;continue}switch(typeof sourceVal){case"object":switch(typeof targetVal){case"object":this.mergeDeep(targetVal,sourceVal);break;default:target[key]=sourceVal;break;}break;default:target[key]=sourceVal;}}return target}mergedHistory(){if(null===this._window.history.state)return this.wrap(this._history);const retObj=Object.assign({},this._window.history.state);return this.mergeDeep(retObj,this.wrap(this._history))}}define(XtalStateUpdate);const watch="watch",xtal_subscribers="xtal-subscribers";class XtalStateWatch extends XtalStateBase{static get is(){return"xtal-state-watch"}constructor(){super()}static get observedAttributes(){return super.observedAttributes.concat([watch])}attributeChangedCallback(name,oldValue,newValue){super.attributeChangedCallback(name,oldValue,newValue);switch(name){case watch:this._watch=null!==newValue;break;}this.notify()}addSubscribers(){if(this._notReady){setTimeout(()=>{this.addSubscribers()},50);return}const win=this._window;if(!win[xtal_subscribers]){win[xtal_subscribers]=[];const originalPushState=win.history.pushState,boundPushState=originalPushState.bind(win.history);win.history.pushState=function(newState,title,URL){boundPushState(newState,title,URL);win[xtal_subscribers].forEach(subscriber=>{subscriber.history=newState})};const originalReplaceState=win.history.replaceState,boundReplaceState=originalReplaceState.bind(win.history);win.history.replaceState=function(newState,title,URL){boundReplaceState(newState,title,URL);win[xtal_subscribers].forEach(subscriber=>{subscriber.history=newState})};win.addEventListener("popstate",()=>{win[xtal_subscribers].forEach(subscriber=>{subscriber.history=history.state})})}this._window[xtal_subscribers].push(this);this._connected=!0;this.notify()}connectedCallback(){super.connectedCallback();this.addSubscribers()}get history(){return this._history}set history(newVal){this._history=newVal;if(this._watch)this.notify()}get watch(){return this._watch}set watch(newVal){this.attr(watch,newVal,"")}notify(){if(!this._watch||this._disabled||!this._connected)return;this.de("history",{value:this._window.history.state})}}define(XtalStateWatch);const with_url_pattern="with-url-pattern",parse="parse";class XtalStateParse extends XtalStateBase{static get is(){return"xtal-state-parse"}static get observedAttributes(){return super.observedAttributes.concat([with_url_pattern,parse])}attributeChangedCallback(name,oldVal,newVal){super.attributeChangedCallback(name,oldVal,newVal);switch(name){case with_url_pattern:this._withURLPattern=newVal;break;case parse:this["_"+name]=newVal;break;default:super.attributeChangedCallback(name,oldVal,newVal);return;}this.onParsePropsChange()}get withURLPattern(){return this._withURLPattern}set withURLPattern(val){this.attr(with_url_pattern,val)}get parse(){return this._parse}set parse(val){this.attr(parse,val)}connectedCallback(){this._upgradeProperties(["withURLPattern",parse]);super.connectedCallback();this.onParsePropsChange()}onParsePropsChange(){this._window.history.replaceState(XtalStateParse.parseAddressBar(this._parse,this._withURLPattern),"",this._window.location.href)}static parseAddressBar(parsePath,urlPattern){const reg=new RegExp(urlPattern);let thingToParse=self;parsePath.split(".").forEach(token=>{if(thingToParse)thingToParse=thingToParse[token]});const parsed=reg.exec(thingToParse);if(!parsed)return;return parsed.groups}}define(XtalStateParse)})();