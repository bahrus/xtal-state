import{XtalStateBase}from"./xtal-state-base.js";import{define}from"./node_modules/xtal-latx/define.js";import{debounce}from"./node_modules/xtal-latx/debounce.js";const make="make",rewrite="rewrite",history$="history",title="title",url="url";export class XtalStateCommit extends XtalStateBase{constructor(){super(...arguments);this._title=""}static get is(){return"xtal-state-commit"}get make(){return this._make}set make(newVal){if(null!==newVal){this.setAttribute(make,"")}else{this.removeAttribute(make)}}get rewrite(){return this._rewrite}set rewrite(newVal){if(newVal){this.setAttribute(rewrite,"")}else{this.removeAttribute(rewrite)}}get history(){return this._window.history.state}set history(newVal){this._history=newVal;this.onPropsChange()}get title(){return this._title}set title(val){this.setAttribute(title,val)}get url(){return this._url}set url(val){this.setAttribute(url,val)}static get observedAttributes(){return super.observedAttributes.concat([make,rewrite,title,url])}attributeChangedCallback(name,oldValue,newValue){switch(name){case rewrite:case make:this["_"+name]=null!==newValue;break;case url:case title:this["_"+name]=newValue;break;}super.attributeChangedCallback(name,oldValue,newValue)}connectedCallback(){this._upgradeProperties(XtalStateCommit.observedAttributes.concat([history$]));this._debouncer=debounce(()=>{this.updateHistory()},50);super.connectedCallback()}onPropsChange(){if(super.onPropsChange()){if(this._notReady){setTimeout(()=>{this.onPropsChange()},50);return}return!0}if(!this._make&&!this._rewrite)return!0;this._debouncer()}mergedHistory(){return this._history}updateHistory(){const hist=this.mergedHistory();if(null===hist||hist===void 0)return;if(this.make&&!this.url)return;const method=this.make?"push":"replace";let url=this._url?this._url:this._window.location;this._window.history[method+"State"](hist,this._title,url);this.de("history",{value:hist})}}define(XtalStateCommit);