{
  "version": 2,
  "tags": [
    {
      "name": "xtal-state-update",
      "description": "Web component wrapper around the history api",
      "jsDoc": "/**\n * Web component wrapper around the history api\n * @element xtal-state-update\n *\n *\n */",
      "attributes": [
        {
          "name": "disabled",
          "description": "Any component that emits events should not do so if it is disabled.\r\nNote that this is not enforced, but the disabled property is made available.\r\nUsers of this mix-in should ensure not to call \"de\" if this property is set to true.",
          "jsDoc": "/**\r\n         * Any component that emits events should not do so if it is disabled.\r\n         * Note that this is not enforced, but the disabled property is made available.\r\n         * Users of this mix-in should ensure not to call \"de\" if this property is set to true.\r\n         * @attr\r\n         */",
          "type": "boolean"
        },
        {
          "name": "with-path",
          "description": "object inside a new empty object, with key equal to this value.\r\nE.g. if the incoming object is {foo: 'hello', bar: 'world'}\r\nand with-path = 'myPath'\r\nthen the source object which be merged into is:\r\n{myPath: {foo: 'hello', bar: 'world'}}",
          "jsDoc": "/**\r\n        * object inside a new empty object, with key equal to this value.\r\n        * E.g. if the incoming object is {foo: 'hello', bar: 'world'}\r\n        * and with-path = 'myPath'\r\n        * then the source object which be merged into is:\r\n        * {myPath: {foo: 'hello', bar: 'world'}}\r\n        * @attr with-path\r\n        */",
          "type": "string"
        }
      ],
      "properties": [
        {
          "name": "val",
          "type": "\"set\" | \"remove\""
        },
        {
          "name": "disabled",
          "description": "Any component that emits events should not do so if it is disabled.\r\nNote that this is not enforced, but the disabled property is made available.\r\nUsers of this mix-in should ensure not to call \"de\" if this property is set to true.",
          "jsDoc": "/**\r\n         * Any component that emits events should not do so if it is disabled.\r\n         * Note that this is not enforced, but the disabled property is made available.\r\n         * Users of this mix-in should ensure not to call \"de\" if this property is set to true.\r\n         * @attr\r\n         */",
          "type": "boolean"
        },
        {
          "name": "evCount",
          "description": "Tracks how many times each event type was called.",
          "jsDoc": "/**\r\n         * Tracks how many times each event type was called.\r\n         */",
          "type": "{ [key: string]: number; }"
        },
        {
          "name": "asIs",
          "type": "\"\" | \"-changed\""
        },
        {
          "name": "guid",
          "jsDoc": "/**\r\n     * \r\n     */",
          "type": "string"
        },
        {
          "name": "withPath",
          "description": "object inside a new empty object, with key equal to this value.\r\nE.g. if the incoming object is {foo: 'hello', bar: 'world'}\r\nand with-path = 'myPath'\r\nthen the source object which be merged into is:\r\n{myPath: {foo: 'hello', bar: 'world'}}",
          "jsDoc": "/**\r\n        * object inside a new empty object, with key equal to this value.\r\n        * E.g. if the incoming object is {foo: 'hello', bar: 'world'}\r\n        * and with-path = 'myPath'\r\n        * then the source object which be merged into is:\r\n        * {myPath: {foo: 'hello', bar: 'world'}}\r\n        * @attr with-path\r\n        */",
          "type": "string"
        },
        {
          "name": "url",
          "type": "string"
        },
        {
          "name": "urlSearch",
          "type": "string"
        },
        {
          "name": "replaceUrlValue",
          "type": "string"
        },
        {
          "name": "stringifyFn",
          "type": "(t: any) => string"
        },
        {
          "name": "value",
          "type": "any"
        },
        {
          "name": "make",
          "description": "PushState in history",
          "jsDoc": "/**\n     * PushState in history\n     */",
          "type": "any"
        },
        {
          "name": "rewrite",
          "description": "Replace State into history",
          "jsDoc": "/**\n     * Replace State into history\n     */",
          "type": "any"
        },
        {
          "name": "history",
          "description": "Window Context History.State Object to push/replace",
          "jsDoc": "/**\n     * Window Context History.State Object to push/replace\n     */",
          "type": "any"
        },
        {
          "name": "title",
          "description": "Title to use when calling push/replace state",
          "jsDoc": "/**\n     * Title to use when calling push/replace state\n     */",
          "type": "string"
        },
        {
          "name": "new",
          "description": "Initite history to empty object",
          "jsDoc": "/**\n     * Initite history to empty object\n     */",
          "type": "any"
        }
      ],
      "events": [],
      "slots": []
    }
  ]
}